// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by `make model`. DO NOT EDIT.
// This file contains generated code based on the model.Channel struct.

package model

import "encoding/json"

type Channel struct {
	id       string
	name     string
	createAt int64
}

// ChannelInitializer provides a container struct to initialize a new Channel object.
type ChannelInitializer struct {
	Id       string `json:"id"`
	Name     string `json:"name"`
	CreateAt int64  `json:"create_at"`
}

// ChannelPatch is a struct to patch a Channel object.
type ChannelPatch struct {
	Name     *string `json:"name"`
	CreateAt *int64  `json:"create_at"`
}

// NewChannel creates a new instance of Channel populated with the values from a
// ChannelInitializer instance.
func NewChannel(c *ChannelInitializer) *Channel {
	return &Channel{
		id:       c.Id,
		name:     c.Name,
		createAt: c.CreateAt,
	}
}

// ------------------------ Patch object ------------------------ //

// Apply applies the patch to the object
func (c *Channel) Apply(p *ChannelPatch) {
	if p == nil {
		return
	}

	if p.Name != nil {
		c.name = *p.Name
	}

	if p.CreateAt != nil {
		c.createAt = *p.CreateAt
	}

	return
}

// ---------------------- Property Getters ---------------------- //

// Id gets the Id property of the Channel
func (c *Channel) Id() string {
	return c.id
}

// Name gets the Name property of the Channel
func (c *Channel) Name() string {
	return c.name
}

// CreateAt gets the CreateAt property of the Channel
func (c *Channel) CreateAt() int64 {
	return c.createAt
}

// ------------------ JSON Processing Functions ------------------ //

func (c *Channel) UnmarshalJSON(b []byte) error {
	var data *ChannelInitializer
	err := json.Unmarshal(b, data)
	if err != nil {
		return err
	}
	*c = *NewChannel(data)
	return nil
}

func (c *Channel) MarshalJSON() ([]byte, error) {
	return json.Marshal(&ChannelInitializer{
		Id:       c.id,
		Name:     c.name,
		CreateAt: c.createAt,
	})
}
